
<div class="row">
	<div class="card green lighten-5 col m10 s12 offset-m1">
		<h5>Finite State Machine Designer</h5>
		<button class="btn" id="send_btn" onclick="send_data()">Send</button>
		<canvas id="canvas" width="800" height="600">
			<span class="error">Your browser does not support<br>the HTML5 &lt;canvas&gt; element</span>
		</canvas>

		<div class="cy" id="cy"></div>
		<div id="accept" style="display: none;">
			<center><h4>Acepta</h4></center>
		</div>
		<div id="reject" style="display: none;">
			<center><h4>Rechaza</h4></center>
		</div>
		<div id="input" style="display: none;">
			<input id="string" type="text" name="string">
			<button class="btn" onclick="send_string()">Consume</button>
		</div>
	</div>
</div>

<script type="text/javascript">
var cy_data = null

function send_data() {
	$.ajax({
		type: "POST",
		url: '/dfa/compute',
		data: {"data": localStorage['fsm']},
		success: function(data){
			console.log(data)
			cy_data = data
			$("#canvas").fadeOut()
			$("#send_btn").fadeOut()
			render_cy()
			$("#cy").fadeIn()
			$("#input").fadeIn()

		},
		error: function(){
			alert('failure');
		}
	});
}

function send_string() {
	$("#accept").fadeOut()
	$("#reject").fadeOut()
	$.ajax({
		type: "POST",
		url: '/dfa/consume',
		data: {
			"data": localStorage['fsm'],
			"string": $("#string").val()
		},
		success: function(data){
			console.log(data)
			cy_data = data
			$("#canvas").fadeOut()
			$("#send_btn").fadeOut()
			render_movements()
			$("#cy").fadeIn()
			$("#input").fadeIn()
			if (data['accept']) {
				$("#accept").fadeIn()
			} else {
				$("#reject").fadeIn()
			}
		},
		error: function(){
			alert('failure');
		}
	});
}

function render_cy(){
	var cy = cytoscape({
      container: document.getElementById('cy'),

      zoomingEnabled: true,
      userZoomingEnabled: false,
      panningEnabled: true,
      userPanningEnabled: true,

      boxSelectionEnabled: false,
      autounselectify: true,

      style: cytoscape.stylesheet()
        .selector('node')
          .css({
            'content': 'data(id)',
            'text-valign': 'center',
            'color': 'white',
            'text-outline-width': 2,
            'backgrund-color': '#999',
            'text-outline-color': '#999'
          })
        .selector('edge')
          .css({
            'target-arrow-shape': 'triangle',
            'width': 4,
            'line-color': '#ddd',
            'label': 'data(label)',
            'target-arrow-color': '#ddd',
            'curve-style': 'bezier'
          })
        .selector('.highlighted')
          .css({
            'background-color': '#4CAF50',
            'line-color': '#4CAF50',
            'target-arrow-color': '#4CAF50',
            'transition-property': 'background-color, line-color, target-arrow-color',
            'transition-duration': '0.5s'
          }),

      elements: cy_data,

      layout: {
        name: 'breadthfirst',
        directed: true,
        roots: '#a',
        padding: 10
      }
    });
    cy.layout({ name: 'grid' });
}

function render_movements(){
	var cy = cytoscape({
      container: document.getElementById('cy'),

      zoomingEnabled: true,
      userZoomingEnabled: false,
      panningEnabled: true,
      userPanningEnabled: true,

      boxSelectionEnabled: false,
      autounselectify: true,

      style: cytoscape.stylesheet()
        .selector('node')
          .css({
            'content': 'data(id)',
            'text-valign': 'center',
            'color': 'white',
            'text-outline-width': 2,
            'backgrund-color': '#999',
            'text-outline-color': '#999'
          })
        .selector('edge')
          .css({
            'target-arrow-shape': 'triangle',
            'width': 4,
            'line-color': '#ddd',
            'label': 'data(label)',
            'target-arrow-color': '#ddd',
            'curve-style': 'bezier'
          })
        .selector('.highlighted')
          .css({
            'background-color': '#4CAF50',
            'line-color': '#4CAF50',
            'target-arrow-color': '#4CAF50',
            'transition-property': 'background-color, line-color, target-arrow-color',
            'transition-duration': '0.5s'
          }),

      elements: cy_data,

      layout: {
        name: 'breadthfirst',
        directed: true,
        roots: '#a',
        padding: 10
      }
    });

    var elems = cy.elements();

    var movements = cy_data['movements'];

    for (var i = movements.length - 1; i >= 0; i--) {
        console.log(movements[i], i);
    }
    for (var i = 0; i < elems.length; i++) {
        console.log(elems[i]._private.data, i);
    }

    var getEdgeId = function(source, dest, via){
        var ids = []
        for (var i = 0; i < elems.length; i++) {
            if (elems[i].isEdge()) {
                if (elems[i]._private.data.target == dest && elems[i]._private.data.label == via && elems[i]._private.data.source == source) {
                    console.log("AJA", i)
                    return i
                }
            }
        }
    };

    var getStateId = function(state){
        for (var i = 0; i < elems.length; i++) {
            if (elems[i].isNode()) {
                if (elems[i]._private.data.id == state) {
                    return i;
                }
            }
        }
    };

    var actualEdgeId = 0;
    var actualStateId = 0;
    var i = 0;

    var highlightNextEle = function(){
        if( i < movements.length ){
            console.log("Hello", i);
            //First time
            if (i === 0) {
                console.log(movements[i]);
                console.log(actualStateId, actualEdgeId);
                actualStateId = getStateId(movements[i].state);
                elems[actualStateId].addClass('highlighted');
            }

            //Second time times
            if (i == 1) {
                console.log(movements[i]);
                console.log(actualStateId, actualEdgeId);
                elems[actualStateId].removeClass('highlighted');
                actualStateId = getStateId(movements[i].state);
                actualEdgeId = getEdgeId(movements[i-1].state, movements[i].state, movements[i].via);
                elems[actualStateId].addClass('highlighted');
                elems[actualEdgeId].addClass('highlighted');
            }

            //Next ones
            if (i > 1) {
                console.log(movements[i]);
                console.log(actualStateId, actualEdgeId);
                elems[actualStateId].removeClass('highlighted');
                elems[actualEdgeId].removeClass('highlighted');
                actualStateId = getStateId(movements[i].state);
                actualEdgeId = getEdgeId(movements[i-1].state, movements[i].state, movements[i].via);
                elems[actualStateId].addClass('highlighted');
                elems[actualEdgeId].addClass('highlighted');
            }

            i++;
            setTimeout(highlightNextEle, 1000);
        }
    };
    // kick off first highlight
    highlightNextEle();
    cy.layout({ name: 'grid' });
}
</script>